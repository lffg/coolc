(*
 *  CS164 Fall 94
 *
 *  Programming Assignment 1
 *    Implementation of a simple stack machine.
 *
 * Luiz Felipe Frazão Gonçalves
 * ============================
 *
 * This code was NOT generated with AI.
 *)

class OperatorList inherits Sanity {
   isNil() : Bool { true };
   head() : Operator {{
      die("called head() on empty list");
      new Operator;
   }};

   tail() : OperatorList {{
      die("called tail() on empty list");
      self;
   }};

   cons(op: Operator) : OperatorList {
      (new OperatorCons).init(op, self)
   };
};

class OperatorCons inherits OperatorList {
   pHead: Operator;
   pTail: OperatorList;

   isNil() : Bool { false };
   head() : Operator { pHead };
   tail() : OperatorList { pTail };

   init(op: Operator, rest: OperatorList) : OperatorList {{
      pHead <- op;
      pTail <- rest;
	   self;
   }};
};

class IntOperator inherits Operator {
   value : Int;

   with_value(val: Int) : IntOperator {{
      value <- val;
      self;
   }};

   (* override *) exec(i: Interpreter) : Int {{
      i.push(self);
      0;
   }};

   (* override *) int() : Int { value };
   (* override *) kind() : String { "int" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String {
      cat3("IntOperator(", (new Atoi).int_to_string(value), ")")
   };
   (* override *) display() : String { (new Atoi).int_to_string(value) };
};

class AddOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {
      let b : Operator <- i.pop() in
      let a : Operator <- i.pop() in {
         assert(b.kind() = "int", cat2("got non-int operator: ", b.to_string()));
         assert(a.kind() = "int", cat2("got non-int operator: ", a.to_string()));
         i.push(
            (new IntOperator).with_value(a.int() + b.int())
         );
         0;
      }
   };

   (* override *) kind() : String { "add" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String { "AddOperator" };
   (* override *) display() : String { "+" };
};

class SwapOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {
      let b : Operator <- i.pop() in
      let a : Operator <- i.pop() in {
         i.push(b);
         i.push(a);
         0;
      }
   };

   (* override *) kind() : String { "swap" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String { "SwapOperator" };
   (* override *) display() : String { "s" };
};

class EvalOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "eval", "pop eval"); -- remove self
      -- eval can only execute +, s, and int (which is no-op)
      if i.stack().isNil() then 0 else
         let operator : Operator <- i.pop() in {
            if operator.kind() = "int" then operator.exec(i) else
            if operator.kind() = "add" then operator.exec(i) else
            if operator.kind() = "swap" then operator.exec(i) else
            {
               die(cat2("per spec, EvalOperator can't operate on ", operator.to_string()));
               1;
            } fi fi fi;
         }
      fi;
   }};

   (* override *) kind() : String { "eval" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "EvalOperator" };
   (* override *) display() : String { "e" };
};

class DisplayOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "display", "pop display"); -- remove self
      let current : OperatorList <- i.stack() in {
         if current.isNil() then {
            out_string("<empty>\n");
            0;
         } else 0 fi;
         while not current.isNil() loop {
            out_string(cat2(current.head().display(), "\n"));
            current <- current.tail();
         } pool;
      };
      0;
   }};

   (* override *) kind() : String { "display" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "DisplayOperator" };
   (* override *) display() : String { "d" };
};

class HaltOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "halt", "pop halt"); -- remove self
      while not i.stack().isNil() loop i.pop() pool;
      1; -- `1` indicates that interpreter must exit
   }};

   (* override *) kind() : String { "halt" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "HaltOperator" };
   (* override *) display() : String { "x" };
};

class Operator inherits Sanity {
   exec(i: Interpreter) : Int {{
      die("exec(): not implemented");
      0;
   }};

   int() : Int {{
      die(cat2("int(): tried to call int() in operator of kind ", kind()));
      0;
   }};

   kind() : String {{
      die("kind() is not implemented");
      "";
   }};

   is_cmd() : Bool {{
      die("is_cmd() is not implemented");
      false;
   }};

   display() : String {{
      die("display() is not implemented");
      "";
   }};

   to_string() : String {{
      die("to_string() is not implemented");
      "";
   }};
};

class Interpreter inherits Sanity {
   pStack: OperatorList <- new OperatorList;

   push(op: Operator) : Operator {{
      pStack <- pStack.cons(op);
      op;
   }};

   stack() : OperatorList {
      pStack
   };

   head() : Operator {
      pStack.head()
   };

   exec() : Int {
      let h : Operator <- head() in
         if h.is_cmd() then h.exec(self)
         else 0 fi
   };

   pop() : Operator {{
      if pStack.isNil() then {
         die("can't pop() empty stack");
         new Operator;
      } else
         let head : Operator <- pStack.head() in {
            pStack <- pStack.tail();
            head;
         }
      fi;
   }};
};

class Main inherits Sanity {
   atoi : Atoi <- new Atoi;
   i : Interpreter <- new Interpreter;

   should_get_input : Bool <- true;
   input : String;

   (* Reads the line and puts it into `input` if it's non empty, returning true
    * in such a case, and false if it's empty.
    *)
   get_line(prompt: String) : Bool {{
      out_string(prompt);
      let maybe_input : String <- in_string() in {
         if is_empty(maybe_input) then false else {
            input <- maybe_input;
            true;
         } fi;
      };
   }};

   main() : Int {{
      let should_stop : Bool <- false in
      while not should_stop loop
         if not get_line("> ") then {
            -- skip empty lines
            0;
         }
         else
            let op : Operator <- (
               if atoi.parse(input) then (new IntOperator).with_value(atoi.get()) else
               if input = "+" then new AddOperator else
               if input = "s" then new SwapOperator else
               if input = "e" then new EvalOperator else
               if input = "d" then new DisplayOperator else
               if input = "x" then new HaltOperator else
               {
                  die(cat3("Invalid operator '", input, "'\n"));
                  new Operator;
               } fi fi fi fi fi fi
            ) in {
               -- out_string(cat3("just parsed: ", op.to_string(), "\n"));
               i.push(op);
               should_stop <- (i.exec() = 1);
            }
         fi
      pool;
      0;
   }};
};

(* SANITY, A SANER STANDARD ENVIRONMENT
 * ====================================
 *
 * Provies various library-level functions that will make your Cool programming
 * experience less dreadful.
 *)
class Sanity inherits IO {
   bool_to_string(s: Bool) : String {{
      if s then "true" else "false" fi;
   }};

   is_empty(s: String) : Bool {
      s.length() = 0
   };

   (* Accesses the `n`th character of the provided string; returns an empty
    * string if out of bounds.
    *)
   at(s: String, n : Int): String {
      if or(n < 0, s.length() <= n) then {
         die("at: string out of bounds");
         "";
      } else
         s.substr(n, 1)
      fi
   };

   assert(cond: Bool, msg: String) : Int {
      if not cond then die(msg) else 0 fi
   };

   die(msg: String): Int {{
      out_string(cat3("FATAL: ", msg, "\n"));
      abort();
      0;
   }};

   or(a: Bool, b: Bool) : Bool {
      if a then true else b fi
   };

   and(a: Bool, b: Bool) : Bool {
      if not a then false else b fi
   };

   cat2(s1: String, s2: String):
      String { s1.concat(s2) };
   cat3(s1: String, s2: String, s3: String):
      String { s1.concat(s2).concat(s3) };
};

(* A SANE CLASS TO PARSE INTEGERS
 * ==============================
 *
 * The `parse()` method attempts to parse the provided string into an unsigned
 * integer. Such a method returns a boolean indicating whether the parse was
 * successful or not. In the valid case, the caller may call the `get()` method,
 * which will return the parsed integer.
 *
 * Notice that if a call to `get()` is made before a successful `parse()` call,
 * the return is undefined. It may abort the program or return the previous
 * successful integer value.
 *)
class Atoi inherits Sanity {
   internal_char_to_int(c: String) : Int {
      if c = "0" then 0 else
      if c = "1" then 1 else
      if c = "2" then 2 else
      if c = "3" then 3 else
      if c = "4" then 4 else
      if c = "5" then 5 else
      if c = "6" then 6 else
      if c = "7" then 7 else
      if c = "8" then 8 else
      if c = "9" then 9 else
         ~1
      fi fi fi fi fi fi fi fi fi fi
   };

   internal_int_to_char(i: Int) : String {
      if i = 0 then "0" else
      if i = 1 then "1" else
      if i = 2 then "2" else
      if i = 3 then "3" else
      if i = 4 then "4" else
      if i = 5 then "5" else
      if i = 6 then "6" else
      if i = 7 then "7" else
      if i = 8 then "8" else
      if i = 9 then "9" else {
         die("Atoi.int_to_char: can only call in range 0..=9");
         "";
      } fi fi fi fi fi fi fi fi fi fi
   };

   int_to_string(i: Int) : String {
      let out : String <- "" in
      let c : Int <- (if i < 0 then ~i else i fi) in {
         while 0 < c loop
            let quot : Int <- c / 10 in
            let rem : Int <- (c - quot * 10) in {
               out <- cat2(internal_int_to_char(rem), out);
               c <- quot;
            }
         pool;
         if i < 0 then cat2("-", out) else
            if i = 0 then "0" else out fi
         fi;
      }
   };

   parsed : Int <- 0;
   valid : Bool <- false;

   get() : Int {
      if valid then {
         parsed;
      } else {
         die("Atoi.get: there's no valid parsed integer");
         ~1;
      } fi
   };

   parse(s: String) : Bool {{
      valid <- true;
      parsed <- 0;

      let current : String <- "" in
      let i : Int <- 0 in {
         while and(valid, i < s.length()) loop {
            current <- at(s, i);
            let parsed_char : Int <- internal_char_to_int(current) in {
               if parsed_char = ~1 then {
                  valid <- false;
               } else {
                  parsed <- parsed * 10 + parsed_char;
               } fi;
            };

            i <- i + 1;
         } pool;
      };

      valid;
   }};
};

(*
 *  CS164 Fall 94
 *
 *  Programming Assignment 1
 *    Implementation of a simple stack machine.
 *
 * Luiz Felipe Frazão Gonçalves
 * ============================
 *
 * This code was NOT generated with AI.
 *)

class OperatorList inherits Sanity {
   isNil() : Bool { true };
   head() : Operator {{
      die("called head() on empty list");
      new Operator;
   }};

   tail() : OperatorList {{
      die("called tail() on empty list");
      self;
   }};

   cons(op: Operator) : OperatorList {
      (new OperatorCons).init(op, self)
   };
};

class OperatorCons inherits OperatorList {
   pHead: Operator;
   pTail: OperatorList;

   isNil() : Bool { false };
   head() : Operator { pHead };
   tail() : OperatorList { pTail };

   init(op: Operator, rest: OperatorList) : OperatorList {{
      pHead <- op;
      pTail <- rest;
	   self;
   }};
};

class IntOperator inherits Operator {
   value : Int;

   with_value(val: Int) : IntOperator {{
      value <- val;
      self;
   }};

   (* override *) exec(i: Interpreter) : Int {{
      i.push(self);
      0;
   }};

   (* override *) int() : Int { value };
   (* override *) kind() : String { "int" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String {
      cat3("IntOperator(", (new Atoi).int_to_string(value), ")")
   };
   (* override *) display() : String { (new Atoi).int_to_string(value) };
};

class AddOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {
      let b : Operator <- i.pop() in
      let a : Operator <- i.pop() in {
         assert(b.kind() = "int", cat2("got non-int operator: ", b.to_string()));
         assert(a.kind() = "int", cat2("got non-int operator: ", a.to_string()));
         i.push(
            (new IntOperator).with_value(a.int() + b.int())
         );
         0;
      }
   };

   (* override *) kind() : String { "add" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String { "AddOperator" };
   (* override *) display() : String { "+" };
};

class SwapOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {
      let b : Operator <- i.pop() in
      let a : Operator <- i.pop() in {
         i.push(b);
         i.push(a);
         0;
      }
   };

   (* override *) kind() : String { "swap" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String { "SwapOperator" };
   (* override *) display() : String { "s" };
};

class EvalOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "eval", "pop eval"); -- remove self
      -- eval can only execute +, s, and int (which is no-op)
      if i.stack().isNil() then 0 else
         let operator : Operator <- i.pop() in {
            if operator.kind() = "int" then operator.exec(i) else
            if operator.kind() = "add" then operator.exec(i) else
            if operator.kind() = "swap" then operator.exec(i) else
            {
               die(cat2("per spec, EvalOperator can't operate on ", operator.to_string()));
               1;
            } fi fi fi;
         }
      fi;
   }};

   (* override *) kind() : String { "eval" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "EvalOperator" };
   (* override *) display() : String { "e" };
};

class DisplayOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "display", "pop display"); -- remove self
      let current : OperatorList <- i.stack() in {
         if current.isNil() then {
            out_string("<empty>\n");
            0;
         } else 0 fi;
         while not current.isNil() loop {
            out_string(cat2(current.head().display(), "\n"));
            current <- current.tail();
         } pool;
      };
      0;
   }};

   (* override *) kind() : String { "display" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "DisplayOperator" };
   (* override *) display() : String { "d" };
};

class HaltOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "halt", "pop halt"); -- remove self
      while not i.stack().isNil() loop i.pop() pool;
      1; -- `1` indicates that interpreter must exit
   }};

   (* override *) kind() : String { "halt" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "HaltOperator" };
   (* override *) display() : String { "x" };
};

class Operator inherits Sanity {
   exec(i: Interpreter) : Int {{
      die("exec(): not implemented");
      0;
   }};

   int() : Int {{
      die(cat2("int(): tried to call int() in operator of kind ", kind()));
      0;
   }};

   kind() : String {{
      die("kind() is not implemented");
      "";
   }};

   is_cmd() : Bool {{
      die("is_cmd() is not implemented");
      false;
   }};

   display() : String {{
      die("display() is not implemented");
      "";
   }};

   to_string() : String {{
      die("to_string() is not implemented");
      "";
   }};
};

class Interpreter inherits Sanity {
   pStack: OperatorList <- new OperatorList;

   push(op: Operator) : Operator {{
      pStack <- pStack.cons(op);
      op;
   }};

   stack() : OperatorList {
      pStack
   };

   head() : Operator {
      pStack.head()
   };

   exec() : Int {
      let h : Operator <- head() in
         if h.is_cmd() then h.exec(self)
         else 0 fi
   };

   pop() : Operator {{
      if pStack.isNil() then {
         die("can't pop() empty stack");
         new Operator;
      } else
         let head : Operator <- pStack.head() in {
            pStack <- pStack.tail();
            head;
         }
      fi;
   }};
};

class Main inherits Sanity {
   atoi : Atoi <- new Atoi;
   i : Interpreter <- new Interpreter;

   should_get_input : Bool <- true;
   input : String;

   (* Reads the line and puts it into `input` if it's non empty, returning true
    * in such a case, and false if it's empty.
    *)
   get_line(prompt: String) : Bool {{
      out_string(prompt);
      let maybe_input : String <- in_string() in {
         if is_empty(maybe_input) then false else {
            input <- maybe_input;
            true;
         } fi;
      };
   }};

   main() : Int {{
      let should_stop : Bool <- false in
      while not should_stop loop
         if not get_line("> ") then {
            -- skip empty lines
            0;
         }
         else
            let op : Operator <- (
               if atoi.parse(input) then (new IntOperator).with_value(atoi.get()) else
               if input = "+" then new AddOperator else
               if input = "s" then new SwapOperator else
               if input = "e" then new EvalOperator else
               if input = "d" then new DisplayOperator else
               if input = "x" then new HaltOperator else
               {
                  die(cat3("Invalid operator '", input, "'\n"));
                  new Operator;
               } fi fi fi fi fi fi
            ) in {
               -- out_string(cat3("just parsed: ", op.to_string(), "\n"));
               i.push(op);
               should_stop <- (i.exec() = 1);
            }
         fi
      pool;
      0;
   }};
};

(* SANITY, A SANER STANDARD ENVIRONMENT
 * ====================================
 *
 * Provies various library-level functions that will make your Cool programming
 * experience less dreadful.
 *)
class Sanity inherits IO {
   bool_to_string(s: Bool) : String {{
      if s then "true" else "false" fi;
   }};

   is_empty(s: String) : Bool {
      s.length() = 0
   };

   (* Accesses the `n`th character of the provided string; returns an empty
    * string if out of bounds.
    *)
   at(s: String, n : Int): String {
      if or(n < 0, s.length() <= n) then {
         die("at: string out of bounds");
         "";
      } else
         s.substr(n, 1)
      fi
   };

   assert(cond: Bool, msg: String) : Int {
      if not cond then die(msg) else 0 fi
   };

   die(msg: String): Int {{
      out_string(cat3("FATAL: ", msg, "\n"));
      abort();
      0;
   }};

   or(a: Bool, b: Bool) : Bool {
      if a then true else b fi
   };

   and(a: Bool, b: Bool) : Bool {
      if not a then false else b fi
   };

   cat2(s1: String, s2: String):
      String { s1.concat(s2) };
   cat3(s1: String, s2: String, s3: String):
      String { s1.concat(s2).concat(s3) };
};

(* A SANE CLASS TO PARSE INTEGERS
 * ==============================
 *
 * The `parse()` method attempts to parse the provided string into an unsigned
 * integer. Such a method returns a boolean indicating whether the parse was
 * successful or not. In the valid case, the caller may call the `get()` method,
 * which will return the parsed integer.
 *
 * Notice that if a call to `get()` is made before a successful `parse()` call,
 * the return is undefined. It may abort the program or return the previous
 * successful integer value.
 *)
class Atoi inherits Sanity {
   internal_char_to_int(c: String) : Int {
      if c = "0" then 0 else
      if c = "1" then 1 else
      if c = "2" then 2 else
      if c = "3" then 3 else
      if c = "4" then 4 else
      if c = "5" then 5 else
      if c = "6" then 6 else
      if c = "7" then 7 else
      if c = "8" then 8 else
      if c = "9" then 9 else
         ~1
      fi fi fi fi fi fi fi fi fi fi
   };

   internal_int_to_char(i: Int) : String {
      if i = 0 then "0" else
      if i = 1 then "1" else
      if i = 2 then "2" else
      if i = 3 then "3" else
      if i = 4 then "4" else
      if i = 5 then "5" else
      if i = 6 then "6" else
      if i = 7 then "7" else
      if i = 8 then "8" else
      if i = 9 then "9" else {
         die("Atoi.int_to_char: can only call in range 0..=9");
         "";
      } fi fi fi fi fi fi fi fi fi fi
   };

   int_to_string(i: Int) : String {
      let out : String <- "" in
      let c : Int <- (if i < 0 then ~i else i fi) in {
         while 0 < c loop
            let quot : Int <- c / 10 in
            let rem : Int <- (c - quot * 10) in {
               out <- cat2(internal_int_to_char(rem), out);
               c <- quot;
            }
         pool;
         if i < 0 then cat2("-", out) else
            if i = 0 then "0" else out fi
         fi;
      }
   };

   parsed : Int <- 0;
   valid : Bool <- false;

   get() : Int {
      if valid then {
         parsed;
      } else {
         die("Atoi.get: there's no valid parsed integer");
         ~1;
      } fi
   };

   parse(s: String) : Bool {{
      valid <- true;
      parsed <- 0;

      let current : String <- "" in
      let i : Int <- 0 in {
         while and(valid, i < s.length()) loop {
            current <- at(s, i);
            let parsed_char : Int <- internal_char_to_int(current) in {
               if parsed_char = ~1 then {
                  valid <- false;
               } else {
                  parsed <- parsed * 10 + parsed_char;
               } fi;
            };

            i <- i + 1;
         } pool;
      };

      valid;
   }};
};

(*
 *  CS164 Fall 94
 *
 *  Programming Assignment 1
 *    Implementation of a simple stack machine.
 *
 * Luiz Felipe Frazão Gonçalves
 * ============================
 *
 * This code was NOT generated with AI.
 *)

class OperatorList inherits Sanity {
   isNil() : Bool { true };
   head() : Operator {{
      die("called head() on empty list");
      new Operator;
   }};

   tail() : OperatorList {{
      die("called tail() on empty list");
      self;
   }};

   cons(op: Operator) : OperatorList {
      (new OperatorCons).init(op, self)
   };
};

class OperatorCons inherits OperatorList {
   pHead: Operator;
   pTail: OperatorList;

   isNil() : Bool { false };
   head() : Operator { pHead };
   tail() : OperatorList { pTail };

   init(op: Operator, rest: OperatorList) : OperatorList {{
      pHead <- op;
      pTail <- rest;
	   self;
   }};
};

class IntOperator inherits Operator {
   value : Int;

   with_value(val: Int) : IntOperator {{
      value <- val;
      self;
   }};

   (* override *) exec(i: Interpreter) : Int {{
      i.push(self);
      0;
   }};

   (* override *) int() : Int { value };
   (* override *) kind() : String { "int" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String {
      cat3("IntOperator(", (new Atoi).int_to_string(value), ")")
   };
   (* override *) display() : String { (new Atoi).int_to_string(value) };
};

class AddOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {
      let b : Operator <- i.pop() in
      let a : Operator <- i.pop() in {
         assert(b.kind() = "int", cat2("got non-int operator: ", b.to_string()));
         assert(a.kind() = "int", cat2("got non-int operator: ", a.to_string()));
         i.push(
            (new IntOperator).with_value(a.int() + b.int())
         );
         0;
      }
   };

   (* override *) kind() : String { "add" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String { "AddOperator" };
   (* override *) display() : String { "+" };
};

class SwapOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {
      let b : Operator <- i.pop() in
      let a : Operator <- i.pop() in {
         i.push(b);
         i.push(a);
         0;
      }
   };

   (* override *) kind() : String { "swap" };
   (* override *) is_cmd() : Bool { false };
   (* override *) to_string() : String { "SwapOperator" };
   (* override *) display() : String { "s" };
};

class EvalOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "eval", "pop eval"); -- remove self
      -- eval can only execute +, s, and int (which is no-op)
      if i.stack().isNil() then 0 else
         let operator : Operator <- i.pop() in {
            if operator.kind() = "int" then operator.exec(i) else
            if operator.kind() = "add" then operator.exec(i) else
            if operator.kind() = "swap" then operator.exec(i) else
            {
               die(cat2("per spec, EvalOperator can't operate on ", operator.to_string()));
               1;
            } fi fi fi;
         }
      fi;
   }};

   (* override *) kind() : String { "eval" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "EvalOperator" };
   (* override *) display() : String { "e" };
};

class DisplayOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "display", "pop display"); -- remove self
      let current : OperatorList <- i.stack() in {
         if current.isNil() then {
            out_string("<empty>\n");
            0;
         } else 0 fi;
         while not current.isNil() loop {
            out_string(cat2(current.head().display(), "\n"));
            current <- current.tail();
         } pool;
      };
      0;
   }};

   (* override *) kind() : String { "display" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "DisplayOperator" };
   (* override *) display() : String { "d" };
};

class HaltOperator inherits Operator {
   (* override *) exec(i: Interpreter) : Int {{
      assert(i.pop().kind() = "halt", "pop halt"); -- remove self
      while not i.stack().isNil() loop i.pop() pool;
      1; -- `1` indicates that interpreter must exit
   }};

   (* override *) kind() : String { "halt" };
   (* override *) is_cmd() : Bool { true };
   (* override *) to_string() : String { "HaltOperator" };
   (* override *) display() : String { "x" };
};

class Operator inherits Sanity {
   exec(i: Interpreter) : Int {{
      die("exec(): not implemented");
      0;
   }};

   int() : Int {{
      die(cat2("int(): tried to call int() in operator of kind ", kind()));
      0;
   }};

   kind() : String {{
      die("kind() is not implemented");
      "";
   }};

   is_cmd() : Bool {{
      die("is_cmd() is not implemented");
      false;
   }};

   display() : String {{
      die("display() is not implemented");
      "";
   }};

   to_string() : String {{
      die("to_string() is not implemented");
      "";
   }};
};

class Interpreter inherits Sanity {
   pStack: OperatorList <- new OperatorList;

   push(op: Operator) : Operator {{
      pStack <- pStack.cons(op);
      op;
   }};

   stack() : OperatorList {
      pStack
   };

   head() : Operator {
      pStack.head()
   };

   exec() : Int {
      let h : Operator <- head() in
         if h.is_cmd() then h.exec(self)
         else 0 fi
   };

   pop() : Operator {{
      if pStack.isNil() then {
         die("can't pop() empty stack");
         new Operator;
      } else
         let head : Operator <- pStack.head() in {
            pStack <- pStack.tail();
            head;
         }
      fi;
   }};
};

class Main inherits Sanity {
   atoi : Atoi <- new Atoi;
   i : Interpreter <- new Interpreter;

   should_get_input : Bool <- true;
   input : String;

   (* Reads the line and puts it into `input` if it's non empty, returning true
    * in such a case, and false if it's empty.
    *)
   get_line(prompt: String) : Bool {{
      out_string(prompt);
      let maybe_input : String <- in_string() in {
         if is_empty(maybe_input) then false else {
            input <- maybe_input;
            true;
         } fi;
      };
   }};

   main() : Int {{
      let should_stop : Bool <- false in
      while not should_stop loop
         if not get_line("> ") then {
            -- skip empty lines
            0;
         }
         else
            let op : Operator <- (
               if atoi.parse(input) then (new IntOperator).with_value(atoi.get()) else
               if input = "+" then new AddOperator else
               if input = "s" then new SwapOperator else
               if input = "e" then new EvalOperator else
               if input = "d" then new DisplayOperator else
               if input = "x" then new HaltOperator else
               {
                  die(cat3("Invalid operator '", input, "'\n"));
                  new Operator;
               } fi fi fi fi fi fi
            ) in {
               -- out_string(cat3("just parsed: ", op.to_string(), "\n"));
               i.push(op);
               should_stop <- (i.exec() = 1);
            }
         fi
      pool;
      0;
   }};
};

(* SANITY, A SANER STANDARD ENVIRONMENT
 * ====================================
 *
 * Provies various library-level functions that will make your Cool programming
 * experience less dreadful.
 *)
class Sanity inherits IO {
   bool_to_string(s: Bool) : String {{
      if s then "true" else "false" fi;
   }};

   is_empty(s: String) : Bool {
      s.length() = 0
   };

   (* Accesses the `n`th character of the provided string; returns an empty
    * string if out of bounds.
    *)
   at(s: String, n : Int): String {
      if or(n < 0, s.length() <= n) then {
         die("at: string out of bounds");
         "";
      } else
         s.substr(n, 1)
      fi
   };

   assert(cond: Bool, msg: String) : Int {
      if not cond then die(msg) else 0 fi
   };

   die(msg: String): Int {{
      out_string(cat3("FATAL: ", msg, "\n"));
      abort();
      0;
   }};

   or(a: Bool, b: Bool) : Bool {
      if a then true else b fi
   };

   and(a: Bool, b: Bool) : Bool {
      if not a then false else b fi
   };

   cat2(s1: String, s2: String):
      String { s1.concat(s2) };
   cat3(s1: String, s2: String, s3: String):
      String { s1.concat(s2).concat(s3) };
};

(* A SANE CLASS TO PARSE INTEGERS
 * ==============================
 *
 * The `parse()` method attempts to parse the provided string into an unsigned
 * integer. Such a method returns a boolean indicating whether the parse was
 * successful or not. In the valid case, the caller may call the `get()` method,
 * which will return the parsed integer.
 *
 * Notice that if a call to `get()` is made before a successful `parse()` call,
 * the return is undefined. It may abort the program or return the previous
 * successful integer value.
 *)
class Atoi inherits Sanity {
   internal_char_to_int(c: String) : Int {
      if c = "0" then 0 else
      if c = "1" then 1 else
      if c = "2" then 2 else
      if c = "3" then 3 else
      if c = "4" then 4 else
      if c = "5" then 5 else
      if c = "6" then 6 else
      if c = "7" then 7 else
      if c = "8" then 8 else
      if c = "9" then 9 else
         ~1
      fi fi fi fi fi fi fi fi fi fi
   };

   internal_int_to_char(i: Int) : String {
      if i = 0 then "0" else
      if i = 1 then "1" else
      if i = 2 then "2" else
      if i = 3 then "3" else
      if i = 4 then "4" else
      if i = 5 then "5" else
      if i = 6 then "6" else
      if i = 7 then "7" else
      if i = 8 then "8" else
      if i = 9 then "9" else {
         die("Atoi.int_to_char: can only call in range 0..=9");
         "";
      } fi fi fi fi fi fi fi fi fi fi
   };

   int_to_string(i: Int) : String {
      let out : String <- "" in
      let c : Int <- (if i < 0 then ~i else i fi) in {
         while 0 < c loop
            let quot : Int <- c / 10 in
            let rem : Int <- (c - quot * 10) in {
               out <- cat2(internal_int_to_char(rem), out);
               c <- quot;
            }
         pool;
         if i < 0 then cat2("-", out) else
            if i = 0 then "0" else out fi
         fi;
      }
   };

   parsed : Int <- 0;
   valid : Bool <- false;

   get() : Int {
      if valid then {
         parsed;
      } else {
         die("Atoi.get: there's no valid parsed integer");
         ~1;
      } fi
   };

   parse(s: String) : Bool {{
      valid <- true;
      parsed <- 0;

      let current : String <- "" in
      let i : Int <- 0 in {
         while and(valid, i < s.length()) loop {
            current <- at(s, i);
            let parsed_char : Int <- internal_char_to_int(current) in {
               if parsed_char = ~1 then {
                  valid <- false;
               } else {
                  parsed <- parsed * 10 + parsed_char;
               } fi;
            };

            i <- i + 1;
         } pool;
      };

      valid;
   }};
};
