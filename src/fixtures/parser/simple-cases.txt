%% CASE expr simple OF EXPRESSION:

1 + 2 * 3

%% OK WITH:

binary Add (0..9)
  int 1 (0..1)
  binary Mul (4..9)
    int 2 (4..5)
    int 3 (8..9)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% CASE program simple OF PROGRAM:

class Main {
    main() : Int {
        1 + 2 * 3
    };
};

%% OK WITH:

class Main
  method main() : Int
    binary Add (40..49)
      int 1 (40..41)
      binary Mul (44..49)
        int 2 (44..45)
        int 3 (48..49)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% CASE expr error OF EXPRESSION:

1 + 2 *

%% ERROR WITH:

Error (7..7): UnexpectedTokenInExpr { token: Eof }

%% PARTIAL AST:

dummy (7..7)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% CASE block OF EXPRESSION:

{
    1 + 2 * 3;
    4 + 5 + 6;
    7 * 8 + 9;
}

%% OK WITH:

block (0..48)
  binary Add (6..15)
    int 1 (6..7)
    binary Mul (10..15)
      int 2 (10..11)
      int 3 (14..15)
  binary Add (21..30)
    binary Add (21..26)
      int 4 (21..22)
      int 5 (25..26)
    int 6 (29..30)
  binary Add (36..45)
    binary Mul (36..41)
      int 7 (36..37)
      int 8 (40..41)
    int 9 (44..45)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% CASE block error recovery of expr OF EXPRESSION:

{
    1 + 2 *;
    4 + + 6;
    * 8 + 9;
}

%% ERROR WITH:

Error (13..14): UnexpectedTokenInExpr { token: Semicolon }
Error (32..33): UnexpectedTokenInExpr { token: Star }
Error (41..42): UnexpectedTokenInExpr { token: RBrace }

%% PARTIAL AST:

dummy (42..42)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% CASE block error recovery of program OF PROGRAM:

class Main {
    main() : Int {{
        1 + 2 *;
        4 + + 6;
        * 8 + 9;
    }};
};

%% ERROR WITH:

Error (48..49): UnexpectedTokenInExpr { token: Semicolon }
Error (75..76): UnexpectedTokenInExpr { token: Star }
Error (88..89): UnexpectedTokenInExpr { token: RBrace }

%% PARTIAL AST:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% CASE let with multiple bindings OF EXPRESSION:

let x : Int <- 1 + 2,
    y : Int <- 3 + 4,
    z : Int <- 5 + 6 in
      x + y + z

%% OK WITH:

let (0..83)
  binding x: Int (initialized)
    binary Add (15..20)
      int 1 (15..16)
      int 2 (19..20)
  binding y: Int (initialized)
    binary Add (37..42)
      int 3 (37..38)
      int 4 (41..42)
  binding z: Int (initialized)
    binary Add (59..64)
      int 5 (59..60)
      int 6 (63..64)
  in
    binary Add (74..83)
      binary Add (74..79)
        ident x (74..75)
        ident y (78..79)
      ident z (82..83)
